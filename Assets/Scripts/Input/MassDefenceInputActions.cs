//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/MassDefenceInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MassDefenceInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MassDefenceInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MassDefenceInputActions"",
    ""maps"": [
        {
            ""name"": ""Tower Selection"",
            ""id"": ""a40a2a43-1654-47c3-aace-83623e9904b5"",
            ""actions"": [
                {
                    ""name"": ""Left Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""681a74c0-547b-4570-bac0-fab119986ecc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""30921fe7-1ec6-4b92-a6da-ac81128e714f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd59e820-0233-452f-999a-f0a25f99fe82"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Left Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe4561d8-1233-4379-948a-89a777d63f53"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Right Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Tower Selection
        m_TowerSelection = asset.FindActionMap("Tower Selection", throwIfNotFound: true);
        m_TowerSelection_LeftMouse = m_TowerSelection.FindAction("Left Mouse", throwIfNotFound: true);
        m_TowerSelection_RightMouse = m_TowerSelection.FindAction("Right Mouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tower Selection
    private readonly InputActionMap m_TowerSelection;
    private List<ITowerSelectionActions> m_TowerSelectionActionsCallbackInterfaces = new List<ITowerSelectionActions>();
    private readonly InputAction m_TowerSelection_LeftMouse;
    private readonly InputAction m_TowerSelection_RightMouse;
    public struct TowerSelectionActions
    {
        private @MassDefenceInputActions m_Wrapper;
        public TowerSelectionActions(@MassDefenceInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftMouse => m_Wrapper.m_TowerSelection_LeftMouse;
        public InputAction @RightMouse => m_Wrapper.m_TowerSelection_RightMouse;
        public InputActionMap Get() { return m_Wrapper.m_TowerSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TowerSelectionActions set) { return set.Get(); }
        public void AddCallbacks(ITowerSelectionActions instance)
        {
            if (instance == null || m_Wrapper.m_TowerSelectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TowerSelectionActionsCallbackInterfaces.Add(instance);
            @LeftMouse.started += instance.OnLeftMouse;
            @LeftMouse.performed += instance.OnLeftMouse;
            @LeftMouse.canceled += instance.OnLeftMouse;
            @RightMouse.started += instance.OnRightMouse;
            @RightMouse.performed += instance.OnRightMouse;
            @RightMouse.canceled += instance.OnRightMouse;
        }

        private void UnregisterCallbacks(ITowerSelectionActions instance)
        {
            @LeftMouse.started -= instance.OnLeftMouse;
            @LeftMouse.performed -= instance.OnLeftMouse;
            @LeftMouse.canceled -= instance.OnLeftMouse;
            @RightMouse.started -= instance.OnRightMouse;
            @RightMouse.performed -= instance.OnRightMouse;
            @RightMouse.canceled -= instance.OnRightMouse;
        }

        public void RemoveCallbacks(ITowerSelectionActions instance)
        {
            if (m_Wrapper.m_TowerSelectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITowerSelectionActions instance)
        {
            foreach (var item in m_Wrapper.m_TowerSelectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TowerSelectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TowerSelectionActions @TowerSelection => new TowerSelectionActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface ITowerSelectionActions
    {
        void OnLeftMouse(InputAction.CallbackContext context);
        void OnRightMouse(InputAction.CallbackContext context);
    }
}
